<?php

define('ALUMNI_CAS_AUTH_EXCLUDE', 'services/*');

/**
 * Implements hook_menu().
 */
function alumni_cas_auth_menu() {
  global $user;
  $items = array();
  $items['admin/config/people/alumni-cas-auth'] = array(
    'title' => 'Alumni Cas Auth settings',
    'description' => 'Configure Alumni Cas Auth settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alumni_cas_auth_admin_settings'),
    'access arguments' => array('administer alumni cas auth'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'alumni_cas_auth.admin.inc',
  );
  $items['alumni-cas-auth-check-auth'] = array(
    'title' => 'Alumni Cas Check Authenication',
    'page callback' => 'alumni_cas_auth_check_authentication',
    'access callback' => TRUE,
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['alumni-cas-auth-logout'] = array(
    'title' => 'Alumni Cas Logout',
    'page callback' => 'alumni_cas_auth_logout_action',
    'access callback' => TRUE,
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['alumni-cas-auth-login'] = array(
    'title' => 'Alumni Cas Login',
    'page callback' => 'alumni_cas_auth_login_action',
    'access callback' => TRUE,
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function alumni_cas_auth_permission() {
  return array(
    'administer alumni cas auth' => array(
      'title' => t('Administer Cas Auth settings'),
      'description' => t('Configure redirection, login/logout redirection, and other settings.'),
      'restrict access' => TRUE,
    ),
    'download alumni cas private files' => array(
      'title' => t('Download Alumni Cas Private Files'),
      'description' => t('Allow access to Alumni Cas Private Files.'),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Implementation of hook_init
 * Redirect to cas if not authenicated
 * Log in user if cas authenicated successfull
 */
function alumni_cas_auth_init() {
  $cas_getLogin_type_url = variable_get('cas_getLogin_type_url', '');
  $parse_url = drupal_parse_url($cas_getLogin_type_url);
  if (isset($parse_url['query'])) {
    $cas_getLogin_type_url = $cas_getLogin_type_url . '&callback=?';
  }
  else {
    $cas_getLogin_type_url = $cas_getLogin_type_url . '?callback=?';
  }
  drupal_add_js(drupal_get_path('module', 'alumni_cas_auth') . '/js/alumni_cas_auth.js');
  $settings = array (
    'path' => base_path(),
    'cas_getLogin_type_url' => $cas_getLogin_type_url
  );
  drupal_add_js( array ("alumni_cas_auth" => $settings), 'setting');
  if (_alumni_cas_auth_force_login()) {
    alumni_cas_auth_login();
  }
}

/**
 * Initialize AlumniCasUser.
 */
function alumni_cas_auth_user_init() {
  // Load AlumniCasUser
  module_load_include('inc', 'alumni_cas_auth', 'alumni_cas_user');
  return new AlumniCasUser();
}

/**
 * Loads the Drupal user associated with this Cas user
 */
function alumni_cas_auth_load_user($alumni_cas_user) {
  $user_id = $alumni_cas_user->get_user_id();
  $data_url = cas_get_data_url($user_id);
  $user_name = _alumni_cas_auth_get_user_name($data_url);
  $user_name = str_replace('OK:', '', $user_name);
  $user_name = trim($user_name);
  $name = $user_name . ' ' . substr($user_id,-4);
  $found_user = user_load_by_name($name);
  if ($found_user) {
    return $found_user;
  }
  $alumnipg_role = user_role_load_by_name('alumnipg');
  $new_user = user_save('', array(
    'name' => $name,
    'pass' => '',
    'mail' => $user_name . '@alumni.example.com',
    'init' => $user_name,
    'status' => 1,
    'roles' => array($alumnipg_role->rid => $alumnipg_role->rid)
  ));
  return $new_user;
}

/**
 * Logs the user into Cas
 */
function alumni_cas_auth_login($next_url = null) {
  global $user;
  if (user_is_logged_in()) {
    // user is logged in, nothing more to do
    return;
  }
  $alumni_cas_user = alumni_cas_auth_user_init();
  // check if we are returning from a cas login
  if ($alumni_cas_user->returning_from_cas_login()) {
    // check authenication response from cas
    if (!$alumni_cas_user->is_authenicated()) {
      // authenicate the cas user
      $alumni_cas_user->authenicate($next_url);
    }
    $user = alumni_cas_auth_load_user($alumni_cas_user);
    if ($user->uid) {
      user_login_finalize();
      drupal_set_message('You have successfully logged in');
    }
  } else {
    // authenicate the cas user
    $alumni_cas_user->authenicate($next_url);
  }
}

/**
 * Gets the Cas User Name
 */
function _alumni_cas_auth_get_user_name($url) {
  $return = drupal_http_request($url);
  if ($return->code == 200) {
    return $return->data;
  }
  return '';
}

/**
 * Determine if we should require the user be authenticated.
 *
 * @return
 *   TRUE if we should require the user be authenticated, FALSE otherwise.
 */
function _alumni_cas_auth_force_login() {

  // Do not force login for XMLRPC, Cron, or Drush.
  if (stristr($_SERVER['SCRIPT_FILENAME'], 'xmlrpc.php')) {
    return FALSE;
  }
  if (stristr($_SERVER['SCRIPT_FILENAME'], 'cron.php')) {
    return FALSE;
  }
  if (function_exists('drush_verify_cli') && drush_verify_cli()) {
    return FALSE;
  }

  // Excluded page do not need login.
  if ($pages = variable_get('alumni_cas_auth_exclude', ALUMNI_CAS_AUTH_EXCLUDE)) {
    $path = drupal_get_path_alias($_GET['q']);
    if (drupal_match_path($path, $pages)) {
      return FALSE;
    }
  }

  // Set the default behavior.
  $force_login = variable_get('alumni_cas_auth_access', 0);

  // If we match the specified paths, reverse the behavior.
  if ($pages = variable_get('alumni_cas_auth_pages', '')) {
    $path = drupal_get_path_alias($_GET['q']);
    if (drupal_match_path($path, $pages)) {
      $force_login = !$force_login;
    }
  }

  // If we match the private files path, force login
  if ($private_files_path = variable_get('alumni_cas_auth_private_files_base_path', '')) {
    $path = drupal_get_path_alias($_GET['q']);
    $private_files_path = 'system/files/' . $private_files_path;
    if (drupal_match_path($path, $private_files_path)) {
      $force_login = 1;
    }
  }

  return $force_login;
}

/**
 * Implementation of hook_file_download
 */
function alumni_cas_auth_file_download($uri, $field_type = 'file') {
  if (variable_get('alumni_cas_auth_check_private_file_access', 1) && drupal_match_path($uri,'private://' . variable_get('alumni_cas_auth_private_files_base_path', ''))) {
    if (!user_access('download alumni cas private files')) {
      return -1;
    }
  }
  return null;
}

/**
 * Implementation of hook_gsb_restricted_pages_info
 * Returns login callback for GSB Restricted Pages
 */
function alumni_cas_auth_gsb_restricted_pages_info() {
  return array(
    'alumni' => array(
      'callback' => 'alumni_cas_auth_login',
    ),
  );
}

/**
 * Check if the User has been authenticated with Cas
 */
function alumni_cas_auth_check_authentication() {
  alumni_cas_auth_login(current_path());
  return drupal_json_output(array('authenication_status' => TRUE));
}

/**
 * Logs the current user out, and redirects to Cas logout page.
 */
function alumni_cas_auth_logout_action() {
  global $user;
  // Destroy the current session, and reset $user to the anonymous user.
  if (user_is_logged_in()) {
    module_invoke_all('user_logout', $user);
    session_destroy();
  }
  $path = 'https://alumni-gsb.stanford.edu/cas/service/logoff?pg=yes';
  drupal_goto($path);
}

/**
 * Logs the current user into Cas.
 */
function alumni_cas_auth_login_action() {

  $referer = $_SERVER["HTTP_REFERER"];

  // Create the next url from the referer
  $next_url = _alumni_cas_auth_create_nexturl($referer);

  // Add on the goto query param and request the login from Cas
  alumni_cas_auth_login($GLOBALS['base_url'] . '/' . $_SERVER['REQUEST_URI'] . '$goto=' . $next_url);

  // Get the next url passed from Cas - from the referer
  $next_url = _alumni_cas_auth_get_nexturl($referer);

  // Get the goto path from the next_url and...
  // goto it... word.
  $goto_path = _alumni_cas_auth_get_goto_path($next_url);
  drupal_goto($goto_path);

}

/**
 * Creates the next url ( the query param nu= ) passed to Cas
 */
function _alumni_cas_auth_create_nexturl($next_url) {
  $next_url = str_replace('/', '*', $next_url);
  $next_url = str_replace('?', '$', $next_url);
  $next_url = str_replace('&', '$', $next_url);
  return $next_url;
}

/**
 * Gets the next url ( the query param nu= ) passed from Cas
 */
function _alumni_cas_auth_get_nexturl($request_uri) {
  $parsed_url = drupal_parse_url($request_uri);
  $next_url = str_replace('*', '/', $parsed_url['query']['nu']);
  return $next_url;
}

/**
 * Gets the goto path from the next_url
 */
function _alumni_cas_auth_get_goto_path($next_url) {
  global $base_url;

  $goto_path = explode('goto=', $next_url);
  $base = str_replace('https', 'http', $base_url);
  $goto_path = str_replace('https', 'http', $goto_path[1]);
  $goto_path = str_replace($base, '', $goto_path);
  return $goto_path;
}
